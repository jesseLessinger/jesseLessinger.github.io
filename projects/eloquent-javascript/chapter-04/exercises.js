////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1) {
  
  let results = [];
  
  //if there's range or step is negative, empty array;
  if (start === end || step < 0) {
    return results;
  }
  
  if (start < end) { 
    while (start <= end) {
      results.push(start);
      start += step;
    } 
  } else {
    while (start >= end) {
      results.push(start);
      start -= step;
    }
  }
  
  //results.push(end);
  
  return results;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let total = 0;
  for (let i = 0; i < array.length; i++) {
    total += array[i];
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let results = [];
  
  for(let i = array.length-1; i > -1; i--) {
    results.push(array[i]);
  }

  return results;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let reverse = reverseArray(array);
  for (let i = 0; i < array.length; i++) {
    array[i] = reverse[i];
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  let list = {}
  list.value = arr[0];
  if (arr.length != 1) {
    list.rest = arrayToList(arr.slice(1))
  } else {
    list.rest = null;
  }
  
  return list;
  
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, arr = []) {
  
  arr.push(list.value);
  
  if (list.rest !== null) {
    listToArray(list.rest, arr);
  } 
  
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(elem, list) {
 
  return {value: elem, rest: list};  
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if (n === 0) {
    return list.value;
  } else if (list.rest === null){ 
    return undefined;
  } else {
    return nth(list.rest, n-1);
  }
  
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  
  if (typeof a === 'object' && a != null) {
    //loop through keys
    let aKeys = Object.keys(a);
    let bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) {
      return false;
    } 
    for (let i = 0; i < aKeys.length; i++) {
      //if a key doesn't match b key return false
      if (aKeys[i] !== bKeys[i]) {
        return false;
      }
      if ( !deepEqual(a[aKeys[i]], b[bKeys[i]]) ) { //recursive call
        return false;
      }
    }
    return true; 
  } else if (a !== b) {  //end game
    return false;
  } else {
    return true;
  }
  
 //made it throug a loop return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
